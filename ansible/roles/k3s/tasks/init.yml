- name: Check if k3s is already installed
  ansible.builtin.stat:
    path: /usr/local/bin/k3s
  register: k3s_binary

- name: Download the k3s install script
  ansible.builtin.get_url:
    url: https://get.k3s.io
    dest: /tmp/k3s-install.sh
    mode: '0755'
  when: not k3s_binary.stat.exists

- name: Config firewall for K3s
  ansible.builtin.include_role:
    name: firewall
  vars:
    firewall_extra_rules:
      - { port: 6443, proto: tcp, comment: 'K3s API' }
      - { port: 8472, proto: udp, comment: 'Flannel VXLAN' }
      - { port: 2379:2380, proto: tcp, comment: 'HA with embedded etcd' }
      - { from: 10.42.0.0/16, comment: 'pods'}
      - { from: 10.43.0.0/16, comment: 'services' }

- name: Run k3s install script with flags
  ansible.builtin.command:
    cmd: >
      /tmp/k3s-install.sh server
      --cluster-init
      --tls-san {{ k3s_vip }}
      --disable traefik
      --disable servicelb
  args:
    creates: /usr/local/bin/k3s
  become: true
  when: not k3s_binary.stat.exists

- name: Ensure the k3s service is running and enabled
  ansible.builtin.service:
    name: k3s
    state: started
    enabled: true

- name: Retrieve k3s node token
  ansible.builtin.slurp:
    src: /var/lib/rancher/k3s/server/node-token
  register: k3s_cluster_token

- name: Fetch kubeconfig file
  ansible.builtin.fetch:
    src: /etc/rancher/k3s/k3s.yaml
    dest: /tmp/k3s.yml
    flat: true

- name: Replace IPv4 in fetched kubeconfig file
  ansible.builtin.replace:
    path: /tmp/k3s.yml
    regexp: '127\.0\.0\.1'
    replace: '{{ k3s_vip }}'
  delegate_to: localhost
  become: false
